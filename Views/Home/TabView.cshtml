<style>
    #v1table_wrapper, #v2table_wrapper { margin: 16px 0 15vh 0; }
    .even-row { background-color: #ffffff !important;}
    .odd-row { background-color: #f2f2f2 !important; }
    .data-unavailable { background-color: #f09085 !important;}
    .custom-tooltip {
        background-color: #fff;
        border: 1px solid #ddd;
        padding: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        color: #333;
    }

    .export-button {
        background-color: #01AC8D !important;
        border-color: #f2f2f2 !important;
        display: inline-block;
        font-weight: 400 !important;
        color: #f2f2f2 !important;
        padding: 10px 20px 10px 20px !important;
        font-size: 1rem !important;
        line-height: 1.5 !important;
        border-radius: 0.25rem !important;
    }

    .dt-buttons, .dataTables_filter { margin: 0rem 3rem 0.75rem 3rem; }
</style>

<div id="tab-view" class="tab-view">
    <ul class="nav nav-tabs d-flex" style="font-weight: 600;" id="postsTabs">
        <li class="p-2">Determ API:</li>
        <li class="nav-item">
            <a class="nav-link active" id="v1Tab" data-toggle="tab" href="#v1">V1</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="v2Tab" data-toggle="tab" href="#v2">V2</a>
        </li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane fade show active" id="v1">
            @Html.Partial("TabContent", 1)
        </div>
        <div class="tab-pane fade" id="v2">
            @Html.Partial("TabContent", 2)
        </div>
    </div>
</div>

<script>
    var isLoaded = false;

    $(document).ready(function () {
        setupDetermTables();
        
        initTabs();
    });

    function initTabs() {
         $('#postsTabs a').on('click', function (e) {
            e.preventDefault();
            $(this).tab('show');
        });
    }

    function updateTables() {
        $(`#v1table`).DataTable().destroy();
        $(`#v2table`).DataTable().destroy();
        setupDetermTables(true);
    }

    function setupDetermTables(update) {
        setupDetermTable(1, update);
        setupDetermTable(2, update);
    }

    function setupDetermTable(id, update) {
        var fromDate = $('#fromDate').val();
        var from = Math.floor(new Date(fromDate).getTime() / 1000);
        
        var toDate = $('#toDate').val();
        var to = Math.floor(new Date(toDate).getTime() / 1000);
        
        var count = $('#count').val();

        var group = $('#group').val();
        var groupId = getGroupId(group);

        var keywordId = $('#keyword').val();
        console.log(`keyword ID: ${keywordId}`);

        // console.log(`setting up V${id}table calling request with from: ${from}, to: ${to}, group: ${groupId}, count ${count}`);
        var data = (update) ? { from: from, to: to, count: count, groupId: groupId, keywordId: keywordId, id: id } : {id: id}; 

        $(`#v${id}table`).DataTable().destroy();
        $(`#v${id}table`).DataTable({
            ajax: {
                url: `/TabContent/${(update) ? "Update" : "Load"}Data/`,
                type: 'POST',
                data: data,
                dataSrc: ''
            },
            columns: [
                {
                    data: 'id', render: function (data, type, row, meta) {
                        return `<div data-toggle="tooltip" data-placement="top" title="${data}">${data}</div>`;
                    }
                },
                {
                    data: 'thumbnail',
                    className: 'text-center',
                    render: function (data, type, row, meta) {
                        if (data != null) {
                            return `<img src="${data}" style="max-width: 75px;" alt="N/A"/>`;
                        } else {
                            return "N/A"
                        }
                    }
                },
                {
                    data: 'title',
                    render: function (data, type, row, meta) {
                        if (data != null) {
                            return `<div class="text-truncate" style="max-width: 200px;" data-toggle="tooltip" data-placement="top" title="${data}">${data}</div>`;
                        } else {
                            return "N/A"
                        }
                    }
                },
                {
                    data: 'insertTime',
                    render: function (data, type, row, meta) {
                        return '<div style="white-space: nowrap;">' + moment.unix(data).format('YYYY.MM.DD HH:mm') + '</div>';
                    }
                },
                { data: 'type' },
                { data: 'from',
                    render: function (data, type, row, meta) {
                        if (data != null) {
                            return `<div class="text-truncate" data-toggle="tooltip" data-placement="top" title="${data}">${data}</div>`;
                        } else { 
                            return "N/A";
                        }
                    }
                },
                {
                    data: 'url',
                    render: function (data, type, row, meta) {
                        if (data != null) {
                            return `<div class="text-truncate" style="max-width: 200px;" data-toggle="tooltip" data-placement="top" title="${data}"><a href="${data}" target="_blank">${data}</a></div>`;
                        } else {
                            return "N/A"
                        }
                    }
                },
                { 
                    data: 'keywordName',
                    render: function (data, type, row, meta) {
                        return `<div class="text-truncate" style="max-width: 150px;" data-toggle="tooltip" data-placement="top" title="${data}">${data}</div>`;
                    }
                },
                { data: 'reach' },
                { data: 'sourceReach' },
                { data: 'interaction' },
                { data: 'influenceScore' },
                { data: 'likeCount' },
                { data: 'commentCount' },
                { data: 'shareCount' },
                { data: 'virality' },
                { data: 'autoSentiment' }
            ], rowCallback: function (row, data, index) {
                if (data["url"] == null) {
                    $(row).addClass('data-unavailable');
                } else if (index % 2 == 0) {
                    $(row).addClass('even-row');
                } else {
                    $(row).addClass('odd-row');
                }
            },
            lengthChange: false,
            info: true,
            order: [[3, 'desc']],
            dom: 'Bfrtip',
            paging: false,
            buttons: [
                {
                    extend: 'excelHtml5',
                    text: 'Export',
                    className: 'export-button',
                    title: `${fromDate} -- ${toDate} V${id} - ${group}`
                }
            ],
            initComplete: function (settings, json) {
                // console.log(json);
                isLoaded = true;
            }
        });

         // Initialize tooltips
        $('[data-toggle="tooltip"]').tooltip({
            animation: true,
            delay: { "show": 0.0, "hide": 0.3 },
            html: true,
        });

        window.onscroll = function () {
            if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight &&
                isLoaded) {
                addRows();
            }
        };
    }

    function addRows() {
        console.log('Reached the end of the page');
        var currentCount = $('#count').val();
        var increment = currentCount < 100 ? 10 : 100;
    }
</script>